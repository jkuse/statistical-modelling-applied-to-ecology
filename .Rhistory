acf(co2)
pacf(co2)
# Funcoes de autocorrelacao
acf(co2)
?pacf
# Seasonal decomposition
fit <- stl(co2, s.window="period")
?stl
plot(fit)
# additional plots (pacote 'forecast')
monthplot(co2)
seasonplot(co2)
seasonplot(co2)
??forecast
seasonplot(co2)
?seasonplot
??seasonplot
seasonplot(co2)
### Testando a premissa de estacionaridade
adf.test(co2, alternative = "stationary")
library(forecast)
seasonplot(co2)
### Testando a premissa de estacionaridade
adf.test(co2, alternative = "stationary")
if(!require(nlme)){install.packages('nlme'); library(nlme)}
install.packages("nlme")
library(nlme)
install.packages('glmmTMB')
library(glmmTMB)
# Dados de concentracao de dioxido de carbono medida no topo do vulcao Mauna Loa
data(co2)
class(co2)
head(co2)
# Vamos plotar
plot(co2)
# Funcoes de autocorrelacao
acf(co2)
pacf(co2)
# Seasonal decomposition
fit <- stl(co2, s.window="period")
plot(fit)
# additional plots (pacote 'forecast')
monthplot(co2)
seasonplot(co2)
### Testando a premissa de estacionaridade
adf.test(co2, alternative = "stationary")
if(!require(aTSA)){install.packages('aTSA'); library(aTSA)}
install.packages('aTSA')
install.packages("aTSA")
library(aTSA)
### Testando a premissa de estacionaridade
adf.test(co2, alternative = "stationary")
### Testando a premissa de estacionaridade
adf.test(co2, alternative = "stationary")
### Testando a premissa de estacionaridade
adf.test(co2)
# Dados referentes a abundacia de aves em ilhas do Havaí:  1965-2003
Hawaii <- read.table(file.choose(), header = TRUE, dec = ".") # waterbird data
head(Hawaii)
str(Hawaii)
plot(Hawaii$Year,Hawaii$Moorhen_Kauai,xlab="Year",
ylab="Moorhen abundance on Kauai")
plot(Hawaii$Year,Hawaii$Birds,xlab="Year",
ylab="Moorhen abundance on Kauai")
# Ajustando um modelo GLS sem estrutura de autocorrelacao = lm
M0 <- gls(Birds ~ Rainfall + Year, na.action = na.omit, data = Hawaii)
summary(M0)
# Ajustando um modelo GLS sem estrutura de autocorrelacao = lm
M0 <- gls(Birds ~ Rainfall + Year, na.action = na.omit, data = Hawaii)
library(nlme)
# Ajustando um modelo GLS sem estrutura de autocorrelacao = lm
M0 <- gls(Birds ~ Rainfall + Year, na.action = na.omit, data = Hawaii)
?gls
# Ajustando um modelo GLS sem estrutura de autocorrelacao = lm
M0 <- gls(Birds ~ Rainfall + Year, na.action = na.omit, data = Hawaii)
detach("package:glmmTMB", unload = TRUE)
detach("package:lme4", unload = TRUE)
library(nlme)
# Ajustando um modelo GLS sem estrutura de autocorrelacao = lm
M0 <- gls(Birds ~ Rainfall + Year, na.action = na.omit, data = Hawaii)
detach("package:nlme", unload = TRUE)
library(nlme, lib.loc = "C:/Program Files/R/R-4.2.1/library")
# Ajustando um modelo GLS sem estrutura de autocorrelacao = lm
M0 <- gls(Birds ~ Rainfall + Year, na.action = na.omit, data = Hawaii)
View(Hawaii)
head(Hawaii)
# Dados referentes a abundacia de aves em ilhas do Havaí:  1965-2003
Hawaii <- read.table(file.choose(), header = TRUE, dec = ".") # waterbird data
head(Hawaii)
Hawaii$Birds<-sqrt(Hawaii$Moorhen_Kauai)
plot(Hawaii$Year,Hawaii$Birds,xlab="Year",
ylab="Moorhen abundance on Kauai")
plot(Hawaii$Year,Hawaii$Moorhen_Kauai,xlab="Year",
ylab="Moorhen abundance on Kauai")
plot(Hawaii$Year,Hawaii$Moorhen_Kauai,xlab="Year",
ylab="Moorhen abundance on Kauai")
plot(Hawaii$Year,Hawaii$Birds,xlab="Year",
ylab="Moorhen abundance on Kauai")
# Ajustando um modelo GLS sem estrutura de autocorrelacao = lm
M0 <- gls(Birds ~ Rainfall + Year, na.action = na.omit, data = Hawaii)
summary(M0)
# Diagnostico pela funcao ACF
E<-residuals(M0,type="normalized")
I<-!is.na(Hawaii$Birds)
Efull<-vector(length=length(Hawaii$Birds))
Efull<-NA
Efull[I]<-E
# Diagnostico pela funcao ACF
E<-residuals(M0,type="normalized")
I<-!is.na(Hawaii$Birds)
Efull<-vector(length=length(Hawaii$Birds))
Efull<-NA
Efull[I]<-E
acf(Efull,na.action = na.pass,
main="Auto-correlation plot for residuals")
# Ajustando modelo alternativo com estrutura de autocorrelacao corCompSymm: constante correlacao no tempo
M1<-gls(Birds ~ Rainfall + Year, na.action = na.omit,
correlation = corCompSymm(form =~ Year),
data=Hawaii)
summary(M1)
# Ajustando modelo alternativo com estrutura de autocorrelacao Auto.regressiva: com parametro p referente a correlacao de ordem 1
M2<-gls(Birds ~ Rainfall + Year, na.action = na.omit,
correlation = corAR1(form =~ Year), data = Hawaii)
summary(M2)
cs1 <- corARMA(p = 1, q = 0)
cs2 <- corARMA(p = 2, q = 0) # veja que q = 0, ARMA = AR; p = 2 = AR.2
M3arma1<-gls(Birds~Rainfall+Year,na.action=na.omit,
correlation=cs1,data = Hawaii)
M3arma2<-gls(Birds~Rainfall+Year,na.action=na.omit,
correlation=cs2,data = Hawaii)
AIC(M3arma1,M3arma2)
# Dados referentes a Indice florestal(floresta boreal Russa) em funcao de variaveis de habitat amostradas via SIG
Boreality <- read.table(file.choose(), header = TRUE, dec = ".") # data Boreality
head(Boreality)
str(Boreality)
# Reescalonando os dados
Boreality$Bor<-sqrt(1000*(Boreality$nBor+1)/(Boreality$nTot))
# Ajustando um modelo linear para comecar
B.lm<-lm(Bor~Wet,data=Boreality)
summary(B.lm)
View(Boreality)
View(Boreality)
View(B.lm)
# Avaliando correlacao espacial via bubble
E<-rstandard(B.lm)
mydata<-data.frame(E,Boreality$x,Boreality$y)
coordinates(mydata)<-c("Boreality.x","Boreality.y")
?coordinates
??coordinates
library(sp)
coordinates(mydata)<-c("Boreality.x","Boreality.y")
bubble(mydata,"E",col=c("black","grey"),
main="Residuals",xlab="X-coordinates",
ylab="Y-coordinates")
# Avaliando correlacao espacial via Variograma
Vario1 = variogram(E ~ 1, mydata)
?variogram
??variogram
library(gstat)
# Avaliando correlacao espacial via Variograma
Vario1 = variogram(E ~ 1, mydata)
plot(Vario1)
# Ajustando o modelo sem correlacao
B1.gls<-gls(Bor ~ Wet, data = Boreality)
# Ajustando o modelo sem correlacao
B1.gls<-gls(Bor ~ Wet, data = Boreality)
# Variograma para dignostico da autocorrelacao
var1<-Variogram(B1.gls,form=~x+y,robust=TRUE,maxDist=2000,
resType="pearson")
plot(var1,smooth=T)
plot(Vario1)
plot(var1,smooth=T)
# Incluindo diferentes opcoes de estrutura de correlacao ao modelo
B1A<-gls(Bor ~ Wet, correlation=corSpher(form=~x+y,nugget=T),data=Boreality)
B1B<-gls(Bor ~ Wet, correlation=corLin(form=~x+y,nugget=T),data=Boreality)
# Seleccao por AIC
AIC(B1A,B1C,B1D,B1E)
B1B<-gls(Bor ~ Wet, correlation=corLin(form=~x+y,nugget=T),data=Boreality)
# Incluindo diferentes opcoes de estrutura de correlacao ao modelo
B1A<-gls(Bor ~ Wet, correlation=corSpher(form=~x+y,nugget=T),data=Boreality)
B1C<-gls(Bor ~ Wet, correlation=corRatio(form=~x+y,nugget=T),data=Boreality)
B1D<-gls(Bor ~ Wet, correlation=corGaus(form=~x+y,nugget=T),data=Boreality)
B1E<-gls(Bor ~ Wet, correlation=corExp(form=~x+y,nugget=T),data=Boreality)
# Seleccao por AIC
AIC(B1A,B1C,B1D,B1E)
# Diagnostico por Variograma
Vario2E <- Variogram(B1A, form =~ x + y,
robust =  TRUE, maxDist = 2000,
resType = "normalized")
plot(Vario2E, smooth = FALSE)
# Diagnostico por Variograma
Vario2E <- Variogram(B1A, form =~ x + y,
robust =  TRUE, maxDist = 2000,
resType = "normalized")
plot(Vario2E, smooth = FALSE)
# Diagnostico por Variograma
Vario2A <- Variogram(B1A, form =~ x + y,
robust =  TRUE, maxDist = 2000,
resType = "normalized")
plot(Vario2A, smooth = FALSE)
Vario2E <- Variogram(B1E, form =~ x + y,
robust =  TRUE, maxDist = 2000,
resType = "normalized")
plot(Vario2E, smooth = FALSE)
flies<-read.table(file.choose(),header=T)
str(flies)
# Transforme o vetor em um vetor da classe 'time series'
flies <- ts(flies)
# Plote a serie de dados em um grafico
plot(flies)
# Plote os graficos de autocorrelacao e autocorrelacao parcial
# Descreve os padroes de autocorrelacao serial
# Qual(is) lag(s) parece(m) ser relevante(s)?
acf(flies)
pacf(flies)
# Plote os graficos de autocorrelacao e autocorrelacao parcial
# Descreve os padroes de autocorrelacao serial
# Qual(is) lag(s) parece(m) ser relevante(s)?
acf(flies)
pacf(flies)
# Plote os graficos de autocorrelacao e autocorrelacao parcial
# Descreve os padroes de autocorrelacao serial
# Qual(is) lag(s) parece(m) ser relevante(s)?
acf(flies)
pacf(flies)
# Plote os graficos de autocorrelacao e autocorrelacao parcial
# Descreve os padroes de autocorrelacao serial
# Qual(is) lag(s) parece(m) ser relevante(s)?
acf(flies)
# Plote os graficos de autocorrelacao e autocorrelacao parcial
# Descreve os padroes de autocorrelacao serial
# Qual(is) lag(s) parece(m) ser relevante(s)?
par(mfrow = c(2,2))
par(mfrow = c(1,1))
# Plote os graficos de autocorrelacao e autocorrelacao parcial
# Descreve os padroes de autocorrelacao serial
# Qual(is) lag(s) parece(m) ser relevante(s)?
par(mfrow = c(2,2))
acf(flies)
acf(flies)
pacf(flies)
# Plote os graficos de autocorrelacao e autocorrelacao parcial
# Descreve os padroes de autocorrelacao serial
# Qual(is) lag(s) parece(m) ser relevante(s)?
par(mfrow = c(2,2))
acf(flies)
acf(flies)
pacf(flies)
# Plote os graficos de autocorrelacao e autocorrelacao parcial
# Descreve os padroes de autocorrelacao serial
# Qual(is) lag(s) parece(m) ser relevante(s)?
par(mfrow = c(1,2))
acf(flies)
pacf(flies)
# Plote os graficos de autocorrelacao e autocorrelacao parcial
# Descreve os padroes de autocorrelacao serial
# Qual(is) lag(s) parece(m) ser relevante(s)?
par(mfrow = c(2,1))
acf(flies)
pacf(flies)
# Ajustando modelo alternativo com estrutura de autocorrelacao Auto.regressiva e Media-movel:
# com parâmetro p referente a correlacao de ordem 1 e q referente ao numero de parametros da media movel
?corARMA
cs1 <- corARMA(p = 1, q = 0)
cs2 <- corARMA(p = 2, q = 0) # veja que q = 0, ARMA = AR; p = 2 = AR.2
Marma1<-gls(flies, na.action=na.omit,
correlation=cs1,data = flies)
str(flies)
Marma1<-gls(flies ~ Time-Series, na.action=na.omit,
correlation=cs1,data = flies)
Marma1<-gls(flies ~ Year, na.action=na.omit,
correlation=cs1,data = flies)
Marma1<-gls(flies ~  lag, na.action=na.omit,
correlation=cs1,data = flies)
Marma1<-gls(flies ~ year, na.action=na.omit,
correlation=cs1,data = flies)
Marma1<-gls(flies ~ Lag, na.action=na.omit,
correlation=cs1,data = flies)
str(flies)
# Transforme o vetor em um vetor da classe 'time series'
flies <- ts(flies)
# Plote a serie de dados em um grafico
plot(flies)
Marma1<-gls(flies ~ Time , na.action=na.omit,
correlation=cs1,data = flies)
Marma1<-gls(flies ~  , na.action=na.omit,
# Plote os graficos de autocorrelacao e autocorrelacao parcial
# Descreve os padroes de autocorrelacao serial
# Qual(is) lag(s) parece(m) ser relevante(s)?
par(mfrow = c(2,1))
acf(flies)
pacf(flies)
par(mfrow = c(1,1))
# Vamos chamar os dados
data(mite) # Abundancia de 35 especies de Acaros oribatideos
library(forecast)
# Vamos chamar os dados
data(mite) # Abundancia de 35 especies de Acaros oribatideos
library(spatstat)
# Vamos chamar os dados
data(mite) # Abundancia de 35 especies de Acaros oribatideos
library(spdep)
# Vamos chamar os dados
data(mite) # Abundancia de 35 especies de Acaros oribatideos
library(ncf)
# Vamos chamar os dados
data(mite) # Abundancia de 35 especies de Acaros oribatideos
library(car)
# Vamos chamar os dados
data(mite) # Abundancia de 35 especies de Acaros oribatideos
library(tseries)
# Vamos chamar os dados
data(mite) # Abundancia de 35 especies de Acaros oribatideos
library(pgirmess)}
library(pgirmess)
# Vamos chamar os dados
data(mite) # Abundancia de 35 especies de Acaros oribatideos
library(gstat)
# Vamos chamar os dados
data(mite) # Abundancia de 35 especies de Acaros oribatideos
library(vegan)
# Vamos chamar os dados
data(mite) # Abundancia de 35 especies de Acaros oribatideos
# Vamos chamar os dados
data(mite) # Abundancia de 35 especies de Acaros oribatideos
data(mite.xy) # coordenadas espaciais
data(mite.env) # variaveis ambientais
# Faca uma analise exploratoria destes dados
hist(mite$Brachy)
# Faca uma analise exploratoria destes dados
hist(mite$Brachy)
# Faca uma analise exploratoria destes dados
hist(mite$Brachy)
View(mite.xy)
# Plote os graficos de autocorrelacao e autocorrelacao parcial
# Descreve os padroes de autocorrelacao serial
# Qual(is) lag(s) parece(m) ser relevante(s)?
par(mfrow = c(2,1))
acf(flies)
pacf(flies)
flies
# Transforme o vetor em um vetor da classe 'time series'
flies <- ts(flies)
flies
flies<-read.table(file.choose(),header=T)
str(flies)
flies
# Transforme o vetor em um vetor da classe 'time series'
flies.ts <- ts(flies)
flies$time <- seq(1:length(flies))
flies
?seq
flies$time2 <- seq(1:length(flies), by=1)
flies$time2 <- seq(from=1, to=length(flies), by=1)
length(flies)
flies$time2 <- seq(from=1, to=row(flies), by=1)
row(flies)
flies$time3 <- seq(from=1, to=row(flies), by=1)
row(flies)
flies$time3 <- seq(from=1, to=361, by=1)
Marma1<-gls(flies ~ time3 , na.action=na.omit,
correlation=cs1,data = flies)
library(forecast)
library(nlme)
library(spdep)
library(ncf)
library(tseries)
library(car)
library(pgirmess)
library(gstat)
library(vegan)
# Dados de concentracao de dioxido de carbono medida no topo do vulcao Mauna Loa
data(co2)
class(co2)
head(co2)
# Vamos plotar
plot(co2)
# Funcoes de autocorrelacao
acf(co2)
pacf(co2)
# Seasonal decomposition
fit <- stl(co2, s.window="period")
?stl
plot(fit)
str(Boar)
# Entrar dados de ocorrencia de lesoes de Tuberculose em Javali selvagem na Espanha
Boar <- read.table(file.choose(), header = TRUE, dec = ".")
str(Boar)
Boar$AgeClass <- as.factor(Boar$AgeClass)
str(Boar)
Boar$SEX <- as.factor(Boar$SEX)
str(Boar)
# Entrar dados de ocorrencia de lesoes de Tuberculose em Javali selvagem na Espanha
Boar <- read.table(file.choose(), header = TRUE, dec = ".")
head(Boar)
str(Boar)
Boar$SEX <- as.factor(Boar$SEX)
Boar$AgeClass <- as.factor(Boar$AgeClass)
str(Boar)
# Modelar a relacao Tb ~ Tamanho
# Explorando os dados:
par(mfrow=c(1,2))
boxplot(LengthCT~Tb, xlab="Tamanho", ylab="Tb", data = Boar)
plot(Tb~LengthCT, xlab="Tamanho", ylab="Tb",data=Boar)
# Entrar dados de riqueza da fauna bentonica e relacao com variaveis abioticas (ja conhecemos esses dados)
RIKZRichness<-read.table(file.choose(), header = TRUE)
head(RIKZRichness)
# Variavel resposta: Richness
# Variaveis explicativas (trabalhar apenas com NAP, Exposure e Beach)
# NAP: altura de coleta da amostra em relacao ao nivel da mar
# Exposure: indice de exposicao a acao de ondas
# Beach: Ok
RIKZRichness$fBeach<-factor(RIKZRichness$Beach) # definir fatores
RIKZRichness$fexposure<-factor(RIKZRichness$exposure) # definir fatores
str(RIKZRichness)
library(nlme) # para aplicar a funcao lme
# O modelo
Mlme1 <- lme(Richness ~ NAP, random = ~1 | fBeach, data=RIKZRichness, method = "REML")
# Interprete: o que estamos fazendo? O que define um intercepto aleatorio?
summary(Mlme1)
# Qual o intercepto e inclinacao da parte fixa do modelo?
### intercept value = 6.58 and slope = -2.56
# Qual o desvio no intercepto provocado pelo efeito aleatorio?
### 2.94
# Monte e interprete o grafico:
F0<-fitted(Mlme1,level=0)
F1<-fitted(Mlme1,level=1)
I<-order(RIKZRichness$NAP)
NAPs<-sort(RIKZRichness$NAP)
plot(NAPs,F0[I],lwd=4,type="l",ylim=c(0,22),
ylab="Riqueza",xlab="NAP")
for (i in 1:9){
x1<-RIKZRichness$NAP[RIKZRichness$Beach==i]
y1<-F1[RIKZRichness$Beach==i]
K<-order(x1)
lines(sort(x1),y1[K])
}
text(RIKZRichness$NAP,RIKZRichness$Richness,RIKZRichness$Beach,cex=0.9)
# Qual o intercepto e inclinacao da parte fixa do modelo?
### intercept value = 6.58 and slope = -2.56
# Qual o desvio no intercepto provocado pelo efeito aleatorio?
### 2.94
# Monte e interprete o grafico:
?fitted
# Qual o intercepto e inclinacao da parte fixa do modelo?
### intercept value = 6.58 and slope = -2.56
# Qual o desvio no intercepto provocado pelo efeito aleatorio?
### 2.94
# Monte e interprete o grafico:
par(mfrow = c(2,1))
F0<-fitted(Mlme1,level=0)
F1<-fitted(Mlme1,level=1)
I<-order(RIKZRichness$NAP)
NAPs<-sort(RIKZRichness$NAP)
plot(NAPs,F0[I],lwd=4,type="l",ylim=c(0,22),
ylab="Riqueza",xlab="NAP")
for (i in 1:9){
x1<-RIKZRichness$NAP[RIKZRichness$Beach==i]
y1<-F1[RIKZRichness$Beach==i]
K<-order(x1)
lines(sort(x1),y1[K])
}
text(RIKZRichness$NAP,RIKZRichness$Richness,RIKZRichness$Beach,cex=0.9)
# O que ele esta demonstrando?
# Rode uma regress?o linear que seria equivalente a este modelo misto, porem com apenas componentes fixos
Lm1 <- lm(Richness ~ NAP + factor(Beach), data=RIKZRichness)
summary(Lm1)
# O que ele esta demonstrando?
# Rode uma regress?o linear que seria equivalente a este modelo misto, porem com apenas componentes fixos
Lm1 <- lm(Richness ~ NAP + factor(Beach), data=RIKZRichness)
summary(Lm1)
F2 <- fitted(Lm1)
plot(NAPs,F2[I],lwd=4,type="l",ylim=c(0,22),
ylab="Riqueza",xlab="NAP")
F2 <- fitted(Lm1, level=0)
plot(NAPs,F2[I],lwd=4,type="l",ylim=c(0,22),
ylab="Riqueza",xlab="NAP")
summary(Lm1)
par(mfrow = c(1,1))
summary(Lm1)
Mlme2 <- lme(Richness ~ NAP,
random = ~1 + NAP | fBeach, data = RIKZRichness)
# Interprete: o que estamos fazendo? O que define um intercepto e inclinacao aleatorio?
summary(Mlme2)
# Monte e interprete o grafico:
F0<-fitted(Mlme2,level=0)
F1<-fitted(Mlme2,level=1)
I<-order(RIKZRichness$NAP)
NAPs<-sort(RIKZRichness$NAP)
plot(NAPs,F0[I],lwd=4,type="l",ylim=c(0,22),
ylab="Riqueza",xlab="NAP")
for (i in 1:9){
x1<-RIKZRichness$NAP[RIKZRichness$Beach==i]
y1<-F1[RIKZRichness$Beach==i]
K<-order(x1)
lines(sort(x1),y1[K])
}
text(RIKZRichness$NAP,RIKZRichness$Richness,RIKZRichness$Beach,cex=0.9)
# Interprete: o que estamos fazendo? O que define um intercepto e inclinacao aleatorio?
summary(Mlme2)
Mlme3 <- lme(Richness ~ 1, random = ~1 | fBeach,
data = RIKZRichness)
summary(Mlme3)
Mlme0 <- gls(Richness ~ NAP, # generalized least square, com REML
data = RIKZRichness)
summary(Mlme0)
# Como comparar esses modelos?
# A unica diferenca entre eles eh o fator aleatorio
# Poderiamos utilizar um teste de hipotese:
anova(Mlme0, Mlme1, Mlme2)
0.5*(1-pchisq(12.7207,1)) # para comparar Mlme0 e Mlme1
0.5*((1-pchisq(7.09,1))+(1-pchisq(7.09,2))) # para comparar Mlme1 e Mlme2
